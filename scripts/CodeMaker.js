"use strict";
var CodeMaker;

CodeMaker = function(bdMicro) {
    // places to write the autogenerated code
    this.code="";
    this.projectname = "";
    this.username = "";
    this.crystal = 16000000;
    this.baud = 9600;
    this.hasInputs = false;
    this.hasADC = false;
    this.hasSerialOut = false;
    this.hasCharLCD = false;
    this.bdMicro = bdMicro;
    this.ilinks = this.bdMicro.getIncomingLinks();
    this.olinks = this.bdMicro.getOutgoingLinks();
    return this;
}
CodeMaker.prototype.getFullCode = function () {
    //code = js_beautify(code);
    this.code = "";
    this.code += this.header();
    this.code += this.iomacros();
    this.code += this.adcconfig();
    this.code += this.serialoutput();
    this.code += this.addFuncPrototypes();
    this.code += this.addGlobalVars();
    this.code += js_beautify(this.buildMain());
    return this.code;
}
CodeMaker.prototype.buildMain = function(){
    var code ="";
    code += this.buildMainStart();
    code += this.ioconfigs();
    code += this.buildWhile1Start();
    code += this.buildStateMachine();
    code += this.buildWhile1End();
    code += this.buildMainEnd();
    return code;
}
CodeMaker.prototype.getDateTime = function () {
    var currentTime = new Date();
    var hour = currentTime.getHours();
    var min = currentTime.getMinutes();
    var day = currentTime.getDate()
    var month = currentTime.getMonth() + 1;
    var year = currentTime.getFullYear()
    return day + "/" + month + "/" + year + "  " + hour + ":" + min;
}
CodeMaker.prototype.header = function () {
    var code="";
    code += "/**********************************************/\n"
    code += "// Project Name: " + this.projectname+ "\n"
    code += "// Author: " + this.username+ "\n"
    code += "// Date: " + this.getDateTime()+ "\n"
    code += "// Code auto-generated by System Designer from www.techideas.co.nz\n";
    code += "\n";
    code += "/**********************************************/\n";
    code += "//Hardware defines\n"
    code += "//make sure your oscillator setting matches this \n"
    code += "#define F_CPU " + this.crystal + "//crystal ";
    code += "\n"
    if (this.hasSerialOut) {
        code += "#define BAUD " + this.baud + "//baudrate";
        code += "\n"
        code += "#define BRGEN F_CPU/16/BAUD-1"
        code += "\n"
    }
    code += "\n"
    code += "/**********************************************/\n"
    code += "//Header files with various functions\n"
    code += "//#include <avr/io.h> \n"
    code += "//#include <stdint.h> \n"
    code += "//#include <util/delay.h>  \n"
    code += "//#include <avr/interrupt.h>  \n"
    code += "//#include <avr/eeprom.h>  \n"
    code += "//#include <stdio.h>  \n"
    code += "//#include <string.h>  \n"
    code += "//#include <avr/pgmspace.h>  \n"
    code += "\n"
    return code;
}
CodeMaker.prototype.iomacros = function () {
    var code="";
    code = "/**********************************************/\n";
    code += "//Hardware macros for outputs\n";
    
    for (var i = 0; i < this.olinks.length; i++) {
        code += "#define " + "set_" + this.olinks[i].getDestination().getText() + "()   PORT" + getMicroPort(this.olinks[i], false, 0) + " |= (1<<P" + getMicroPort(this.olinks[i], false, 0) + getMicroPort(this.olinks[i], false, 2) + ")\n"    //force output high\n";
        code += "#define " + "clr_" + this.olinks[i].getDestination().getText() + "()   PORT" + getMicroPort(this.olinks[i], false, 0) + " &= ~(1<<P" + getMicroPort(this.olinks[i], false, 0) + getMicroPort(this.olinks[i], false, 2) + ")\n"    //force output low\n";
        code += "#define " + "toggle_" + this.olinks[i].getDestination().getText() + "()   PORT" + getMicroPort(this.olinks[i], false, 0) + " ^= (1<<P" + getMicroPort(this.olinks[i], false, 0) + getMicroPort(this.olinks[i], false, 2) + ")\n"    //toggle output\n";
    }
    //Array.forEach(this.olinks, function (link) //requires AJAX
    //{
    //    code += "#define " + "set_" + link.getDestination().getText() + "()   PORT" + getMicroPort(link, false, 0) + " |= (1<<P" + getMicroPort(link, false, 0) + getMicroPort(link, false, 2) + \n"    //force output high\n";
    //    code += "#define " + "clr_" + link.getDestination().getText() + "()   PORT" + getMicroPort(link, false, 0) + " &= ~(1<<P" + getMicroPort(link, false, 0) + getMicroPort(link, false, 2) + \n"    //force output low\n";
    //    code += "#define " + "toggle_" + link.getDestination().getText() + "()   PORT" + getMicroPort(link, false, 0) + " ^= (1<<P" + getMicroPort(link, false, 0) + getMicroPort(link, false, 2) + \n"    //toggle output\n";
    //});
    code += "//Hardware macros for inputs\n";
    for (var i = 0; i < this.ilinks.length; i++) {
        if (this.ilinks[i].getOrigin().getId().indexOf("switch") > 0) {
            this.hasInputs = true;
            code += "#define " + this.ilinks[i].getOrigin().getText() + "_IsLow()   ~PIN" + getMicroPort(this.ilinks[i], true, 0) + " & (1<<P" + getMicroPort(this.ilinks[i], true, 0) + getMicroPort(this.ilinks[i], true, 2) + ");\n"    //true if pin is low\n";
            code += "#define " + this.ilinks[i].getOrigin().getText() + "_IsHigh()   PIN" + getMicroPort(this.ilinks[i], true, 0) + " & (1<<P" + getMicroPort(this.ilinks[i], true, 0) + getMicroPort(this.ilinks[i], true, 2) + ");\n"    //true if pin is high\n";
        }
    }

    //Array.forEach(this.ilinks, function (link) {
    //    if (link.getOrigin().getId().indexOf("switch") > 0) {
    //        hasInputs = true;
    //        code += "#define " + link.getOrigin().getText() + "_IsLow()   ~PIN" + getMicroPort(link, true, 0) + " & (1<<P" + getMicroPort(link, true, 0) + getMicroPort(link, true, 2) + \n"    //true if pin is low\n";
    //        code += "#define " + link.getOrigin().getText() + "_IsHigh()   PIN" + getMicroPort(link, true, 0) + " & (1<<P" + getMicroPort(link, true, 0) + getMicroPort(link, true, 2) + \n"    //true if pin is high\n";
    //    }
    //});
    code += "//Hardware macros for ADC inputs\n";
    for (var i = 0; i < this.ilinks.length; i++) {
        if (this.ilinks[i].getOrigin().getId().indexOf("analog") > 0) {
            this.hasADC = true;
            this.hasInputs = true;
            code += "#define " + this.ilinks[i].getOrigin().getText() + " " + getMicroPort(this.ilinks[i], true, 2) + "     //macro to refer to ADC channel\n"; //only goes by pin# at the moment which isn't correct for tiny45
        }
    }

    //Array.forEach(this.ilinks, function (link) {
    //    if (link.getOrigin().getId().indexOf("analog") > 0) {
    //        hasADC = true;
    //        hasInputs = true;
    //        code += "#define " + link.getOrigin().getText() + " " + getMicroPort(link, true, 2) + "     //macro to refer to ADC channel\n"; //only goes by pin# at the moment which isn't correct for tiny45
    //    }
    //});
    code += "\n";
    return code;
}
CodeMaker.prototype.adcconfig = function () {
    var code="";
    if (this.hasADC) {
        code += "\n";
        code += "/**********************************************/\n";
        code += "//Configure ADC\n";
        code += "void init_ADC()\n";
        code += "{\n";
        code += "//At 16MHZ set prescaler to 128 to get 125Khz clock\n";
        code += "ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));\n";
        code += "//At 1MHz set prescaler to 8 to get 125Khz clock\n";
        code += "//ADCSRA |= ((1<<ADPS1)|(1<<ADPS0));\n";
        code += "//AVcc as voltage reference with external capacitor on ARef\n";
        code += "//ADMUX |= (1<<REFS1);      //uncomment this line for internal voltage\n";
        code += "ADMUX |= (1<<REFS0);\n";
        code += "ADCSRA |= (1<<ADEN);       //Power on the ADC\n";
        code += "ADCSRA |= (1<<ADSC);       //Start initial conversion\n";
        code += "}\n";
        code += "// get a single adc reading from one channel\n";
        code += "uint16_t read_adc(uint8_t channel)\n";
        code += "{\n";
        code += "ADMUX &= 0xF0;                  //Clear previously read channel\n";
        code += "ADMUX |= channel;               //Set to new channel to read\n";
        code += "ADCSRA |= (1<<ADSC);            //Starts a new conversion\n";
        code += "while(ADCSRA & (1<<ADSC));      //Wait until the conversion is done\n";
        code += "return ADCW;                    //Returns the value from the channel\n";
        code += "}\n";
    }
    return js_beautify(code) + "\n\n";
}
CodeMaker.prototype.serialoutput = function () {
    var code = "";
    if (this.hasSerialOut) {
        code += "/**********************************************/\n";
        code += "// Setup serial port to send serial data\n";
        code += "void init_USART()\n";
        code += "{\n";
        code += "UBRR0H = (char)(BRGEN>>8); //Set baud rate\n";
        code += "UBRR0L = (char) BRGEN; //Set baud rate\n";
        code += "UCSR0C |= (1<<USBS0); //2 stopbits\n";
        code += "UCSR0C |= (3<<UCSZ00); // 8data\n";
        code += "//UCSR0C |= (1 << UPM01) //parity\n";
        code += "//UCSR0C |= (1 << UPM00) //odd parity\n";
        code += "UCSR0B = (1<<TXEN0);        // Enable transmitter only\n";
        code += "}\n";
        code += "/**********************************************/\n";
        code += "//Send 1 byte of data\n";
        code += "void usart_tx(unsigned char data)\n";
        code += "{\n";
        code += "//UDRE0 is set when buffer is empty, cleared while transmitting data\n";
        code += "//must default to 1 when TXEN0 is set\n";
        code += "while (!( UCSR0A & (1<<UDRE0))) // While not 1 wait (1 is data reg empty)\n";
        code += "{\n";
        code += "}\n";
        code += "UDR0 = data;// Put data into buffer, sends the data\n";
        code += "}\n";
        code += "\n";
    }
    return js_beautify(code) + "\n\n";
}
CodeMaker.prototype.addFuncPrototypes = function () {
    var code = "";
    code += "/**********************************************/\n";
    code += "//Function Prototypes\n";
    code += "\n";
    return code;
}
CodeMaker.prototype.addGlobalVars = function () {
    var code = "";
    code += "/**********************************************/\n";
    code += "//Declare & initialise global variables\n";
    //for (i in this.globalvars) {
    //    code += i + "\n";
    //}
    code += "\n";
    return code;
}
CodeMaker.prototype.ioconfigs = function () {
    var code = "";
    code += "\n";
    code += "// Input & Output Hardware setups\n";
    code += "// Initially make all micro pins outputs\n";
    $.each(myMicrocontroller.Registers.getRegisters(), function (key, txt) {
        if (txt.name.indexOf("DDR") >= 0)
            code += txt.name + " = 0xff;             //make all the pins on the port outputs\n";
    });
    if (this.hasInputs) {
        code += "// Then make these pins inputs\n";
        $.each(this.ilinks, function (key, link) {
            code += "DDR" + getMicroPort(link, true, 0) + " &= ~(1<<P" + getMicroPort(link, true, 0) + getMicroPort(link, true, 2) + ");\n";    //set pin to input\n";
        });
    }
    $.each(this.ilinks, function (key, link) {
        if (link.getOrigin().getId().indexOf("switch") > 0) {
            code += "PORT" + getMicroPort(link, true, 0) + " |= (1<<P" + getMicroPort(link, true, 0) + getMicroPort(link, true, 2) + ");\n";    //activate internal pullup resistor for " + link.getOrigin().getText());
        }
    });
    code += "\n";
    return code;
}
CodeMaker.prototype.buildMainStart = function () {
    var code = "";
    code += "/**********************************************/\n";
    code += "//Main Program starts here\n";
    code += "int main()";
    code += "\n";
    code += "{";
    code += "\n";
    code += "// Initial hardware setups go here\n";
    if (this.hasADC) {
        code += "init_ADC(); //setup the ADC to work\n";
    }
    if (this.hasSerialOut) {
        code += "init_USART(); //setup the TXD to work\n";
    }
    code += "\n";
    return code;
}
CodeMaker.prototype.buildMainEnd = function () {
    var code = "";
    code += "}   //end of main";
    code += "\n";
    code += "\n";
    return code;
}
CodeMaker.prototype.buildWhile1Start = function () {
    var code = "";
    code += "while(1)";
    code += "\n";
    code += "{";
    code += "\n";
    return code;
}
CodeMaker.prototype.buildWhile1End = function () {
    var code = "";
    code += "} //end while(1)";
    code += "\n";
    return code;
}
CodeMaker.prototype.buildStateMachine = function () {
    var code = "";
    code += "/*******************/\n"
    code += "//your code goes here\n"
    return code;
}